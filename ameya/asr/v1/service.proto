syntax = "proto3";
package ameya.asr.v1;

import "ameya/types/v1/messages.proto";
import "ameya/types/v1/enums.proto";

// This file contains preproduction API definitions for the ASR service.
// These APIs are not yet stable and are subject to change.

// The ASR service provides methods that implement speech recognition.
// The service can be used in two ways:
// 1. StreamAudio: The client sends audio data to the server in a streaming fashion. To get the result, the client uses the GetTranscription method after StreamAudio has ended.
// 2. BidiStreamAudio: The client streams audio data to the server and receives partial transcriptions simultaneously.
service ASRService {
    // StreamAudio streams audio data to the server and returns a key to request the result after stream has ended.
    rpc StreamAudio(stream StreamAudioRequest) returns (StreamAudioResponse);
    // GetTranscription returns the transcription of the audio data that was streamed to the server using StreamAudio.
    rpc GetTranscription(GetTranscriptionRequest) returns (GetTranscriptionResponse);
    // BidiStreamAudio streams audio data to the server and returns partial transcriptions simultaneously.
    rpc BidiStreamAudio(stream BidiStreamAudioRequest) returns (stream BidiStreamAudioResponse);
}

message BidiStreamAudioRequest {
    // Oneof is used to send either metadata or audio data
    // Metadata is sent at the start of the stream
    // Audio data is sent after the metadata
    oneof data {
        ameya.types.v1.AudioMetaData metadata = 1; // Metadata sent at the start
        ameya.types.v1.AudioChunk audio_data = 2; // Actual audio data
    }
}

message StreamAudioRequest {
    // Oneof is used to send either metadata or audio data
    // Metadata is sent at the start of the stream
    // Audio data is sent after the metadata
    oneof data {
        ameya.types.v1.AudioMetaData metadata = 1; // Metadata sent at the start
        ameya.types.v1.AudioChunk audio_data = 2; // Actual audio data
    }
}

message StreamAudioResponse {
    // The call ID of the audio data that was streamed to the server.
    string call_id = 1;
    ameya.types.v1.ResponseStatus status = 2;
}

message GetTranscriptionRequest {
    // The call ID of the audio data that was streamed to the server using StreamAudio.
    string call_id = 1;
}

// StreamAudioRequest is the request message for the StreamAudio method.
message GetTranscriptionResponse {
    // The transcription of the audio data that was streamed to the server.
    string transcript = 1;
}

// BdiStreamResponse is the response message for the BidiStreamAudio method.
message BidiStreamAudioResponse {
    // The partial transcription of the audio data that was streamed to the server.
    string partial_transcript = 1;
}
